{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/pabli/Documents/Bootcamp/chess-tower/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { User } from '../models/user';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.url = \"http://localhost:3000/user\";\n  }\n\n  getUser(username, fullUser) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"getting user...\");\n      let user = new User();\n      yield _this.http.get(_this.url + \"?username=\" + username).subscribe({\n        next: data => {\n          if (!data.failed) {\n            let recievedUser = data.user;\n            console.log(data);\n            user.username = recievedUser.username;\n            user.rating.bulletActualRating = recievedUser.rating.bulletActualRating;\n            user.rating.bulletMaxRating = recievedUser.rating.bulletMaxRating;\n            user.rating.blitzActualRating = recievedUser.rating.blitzActualRating;\n            user.rating.blitzMaxRating = recievedUser.rating.blitzMaxRating;\n            user.rating.rapidActualRating = recievedUser.rating.rapidActualRating;\n            user.rating.rapidMaxRating = recievedUser.rating.rapidMaxRating;\n            console.log(user);\n          }\n        },\n        error: error => {\n          console.error('There was an error!', error);\n        }\n      });\n      return user;\n    })();\n  }\n\n}\n\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/pabli/Documents/Bootcamp/chess-tower/src/app/shared/user.service.ts"],"names":["User","i0","i1","UserService","constructor","http","url","getUser","username","fullUser","console","log","user","get","subscribe","next","data","failed","recievedUser","rating","bulletActualRating","bulletMaxRating","blitzActualRating","blitzMaxRating","rapidActualRating","rapidMaxRating","error","ɵfac","UserService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,SAASA,IAAT,QAAqB,gBAArB;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;AACA,SAAKC,GAAL,GAAW,4BAAX;AACH;;AACKC,EAAAA,OAAO,CAACC,QAAD,EAAWC,QAAX,EAAqB;AAAA;;AAAA;AAC9BC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,UAAIC,IAAI,GAAG,IAAIZ,IAAJ,EAAX;AACA,YAAM,KAAI,CAACK,IAAL,CAAUQ,GAAV,CAAc,KAAI,CAACP,GAAL,GAAW,YAAX,GAA0BE,QAAxC,EAAkDM,SAAlD,CAA4D;AAC9DC,QAAAA,IAAI,EAAGC,IAAD,IAAU;AACZ,cAAI,CAACA,IAAI,CAACC,MAAV,EAAkB;AACd,gBAAIC,YAAY,GAAGF,IAAI,CAACJ,IAAxB;AACAF,YAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACAJ,YAAAA,IAAI,CAACJ,QAAL,GAAgBU,YAAY,CAACV,QAA7B;AACAI,YAAAA,IAAI,CAACO,MAAL,CAAYC,kBAAZ,GAAiCF,YAAY,CAACC,MAAb,CAAoBC,kBAArD;AACAR,YAAAA,IAAI,CAACO,MAAL,CAAYE,eAAZ,GAA8BH,YAAY,CAACC,MAAb,CAAoBE,eAAlD;AACAT,YAAAA,IAAI,CAACO,MAAL,CAAYG,iBAAZ,GAAgCJ,YAAY,CAACC,MAAb,CAAoBG,iBAApD;AACAV,YAAAA,IAAI,CAACO,MAAL,CAAYI,cAAZ,GAA6BL,YAAY,CAACC,MAAb,CAAoBI,cAAjD;AACAX,YAAAA,IAAI,CAACO,MAAL,CAAYK,iBAAZ,GAAgCN,YAAY,CAACC,MAAb,CAAoBK,iBAApD;AACAZ,YAAAA,IAAI,CAACO,MAAL,CAAYM,cAAZ,GAA6BP,YAAY,CAACC,MAAb,CAAoBM,cAAjD;AACAf,YAAAA,OAAO,CAACC,GAAR,CAAYC,IAAZ;AACH;AACJ,SAd6D;AAe9Dc,QAAAA,KAAK,EAAGA,KAAD,IAAW;AACdhB,UAAAA,OAAO,CAACgB,KAAR,CAAc,qBAAd,EAAqCA,KAArC;AACH;AAjB6D,OAA5D,CAAN;AAmBA,aAAOd,IAAP;AAtB8B;AAuBjC;;AA5BoB;;AA8BzBT,WAAW,CAACwB,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI1B,WAAV,EAAuBF,EAAE,CAAC6B,QAAH,CAAY5B,EAAE,CAAC6B,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACA5B,WAAW,CAAC6B,KAAZ,GAAoB,aAAc/B,EAAE,CAACgC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAE/B,WAAT;AAAsBgC,EAAAA,OAAO,EAAEhC,WAAW,CAACwB,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import { User } from '../models/user';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nexport class UserService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        this.url = \"http://localhost:3000/user\";\r\n    }\r\n    async getUser(username, fullUser) {\r\n        console.log(\"getting user...\");\r\n        let user = new User();\r\n        await this.http.get(this.url + \"?username=\" + username).subscribe({\r\n            next: (data) => {\r\n                if (!data.failed) {\r\n                    let recievedUser = data.user;\r\n                    console.log(data);\r\n                    user.username = recievedUser.username;\r\n                    user.rating.bulletActualRating = recievedUser.rating.bulletActualRating;\r\n                    user.rating.bulletMaxRating = recievedUser.rating.bulletMaxRating;\r\n                    user.rating.blitzActualRating = recievedUser.rating.blitzActualRating;\r\n                    user.rating.blitzMaxRating = recievedUser.rating.blitzMaxRating;\r\n                    user.rating.rapidActualRating = recievedUser.rating.rapidActualRating;\r\n                    user.rating.rapidMaxRating = recievedUser.rating.rapidMaxRating;\r\n                    console.log(user);\r\n                }\r\n            },\r\n            error: (error) => {\r\n                console.error('There was an error!', error);\r\n            }\r\n        });\r\n        return user;\r\n    }\r\n}\r\nUserService.ɵfac = function UserService_Factory(t) { return new (t || UserService)(i0.ɵɵinject(i1.HttpClient)); };\r\nUserService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: UserService, factory: UserService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}