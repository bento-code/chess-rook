{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/pabli/Documents/Bootcamp/chess-tower/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; //import { environment } from '@environments/environment';\n\nexport class AuthService {\n  constructor(http) {\n    this.http = http; //private authInterceptor:AuthInterceptor;\n\n    this.urlRegister = \"http://localhost:3000/signup\";\n    this.urlLogin = \"http://localhost:3000/signin\"; //this.authInterceptor = new AuthInterceptor();\n  }\n\n  signUp(regData) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"register...\");\n      let registered = false;\n      let data = yield _this.http.post(_this.urlRegister, {\n        username: regData.username,\n        password: regData.password,\n        email: regData.email,\n        name: regData.name,\n        surname: regData.surname\n      }).toPromise();\n\n      if (!data.failed) {\n        registered = true;\n      }\n\n      return registered;\n    })();\n  }\n\n  login(username, password) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"logging...\");\n      let logged = false;\n      let data = yield _this2.http.post(_this2.urlLogin, {\n        username,\n        password\n      }).toPromise();\n\n      if (data.logged) {\n        console.log(data);\n\n        _this2.setSession(data.jwt, username);\n\n        logged = true;\n      }\n\n      return logged;\n    })();\n  }\n\n  setSession(authResult, username) {\n    //const expiresAt = moment().add(authResult.expiresIn,'second');\n    console.log(authResult);\n    localStorage.setItem('jwt', authResult);\n    localStorage.setItem('username', username);\n  }\n\n  logout() {\n    localStorage.removeItem(\"jwt\");\n    localStorage.removeItem(\"username\");\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/pabli/Documents/Bootcamp/chess-tower/src/app/shared/auth.service.ts"],"names":["i0","i1","AuthService","constructor","http","urlRegister","urlLogin","signUp","regData","console","log","registered","data","post","username","password","email","name","surname","toPromise","failed","login","logged","setSession","jwt","authResult","localStorage","setItem","logout","removeItem","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";AAAA,OAAO,KAAKA,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,sBAApB,C,CACA;;AACA,OAAO,MAAMC,WAAN,CAAkB;AACrBC,EAAAA,WAAW,CAACC,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ,CADc,CAEd;;AACA,SAAKC,WAAL,GAAmB,8BAAnB;AACA,SAAKC,QAAL,GAAgB,8BAAhB,CAJc,CAKd;AACH;;AACKC,EAAAA,MAAM,CAACC,OAAD,EAAU;AAAA;;AAAA;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;AACA,UAAIC,UAAU,GAAG,KAAjB;AACA,UAAIC,IAAI,SAAS,KAAI,CAACR,IAAL,CAAUS,IAAV,CAAe,KAAI,CAACR,WAApB,EAAiC;AAC9CS,QAAAA,QAAQ,EAAEN,OAAO,CAACM,QAD4B;AAE9CC,QAAAA,QAAQ,EAAEP,OAAO,CAACO,QAF4B;AAG9CC,QAAAA,KAAK,EAAER,OAAO,CAACQ,KAH+B;AAI9CC,QAAAA,IAAI,EAAET,OAAO,CAACS,IAJgC;AAK9CC,QAAAA,OAAO,EAAEV,OAAO,CAACU;AAL6B,OAAjC,EAMdC,SANc,EAAjB;;AAOA,UAAI,CAACP,IAAI,CAACQ,MAAV,EAAkB;AACdT,QAAAA,UAAU,GAAG,IAAb;AACH;;AACD,aAAOA,UAAP;AAbkB;AAcrB;;AACKU,EAAAA,KAAK,CAACP,QAAD,EAAWC,QAAX,EAAqB;AAAA;;AAAA;AAC5BN,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,UAAIY,MAAM,GAAG,KAAb;AACA,UAAIV,IAAI,SAAS,MAAI,CAACR,IAAL,CAAUS,IAAV,CAAe,MAAI,CAACP,QAApB,EAA8B;AAAEQ,QAAAA,QAAF;AAAYC,QAAAA;AAAZ,OAA9B,EAAsDI,SAAtD,EAAjB;;AACA,UAAIP,IAAI,CAACU,MAAT,EAAiB;AACbb,QAAAA,OAAO,CAACC,GAAR,CAAYE,IAAZ;;AACA,QAAA,MAAI,CAACW,UAAL,CAAgBX,IAAI,CAACY,GAArB,EAA0BV,QAA1B;;AACAQ,QAAAA,MAAM,GAAG,IAAT;AACH;;AACD,aAAOA,MAAP;AAT4B;AAU/B;;AACDC,EAAAA,UAAU,CAACE,UAAD,EAAaX,QAAb,EAAuB;AAC7B;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAYe,UAAZ;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,KAArB,EAA4BF,UAA5B;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,UAArB,EAAiCb,QAAjC;AACH;;AACDc,EAAAA,MAAM,GAAG;AACLF,IAAAA,YAAY,CAACG,UAAb,CAAwB,KAAxB;AACAH,IAAAA,YAAY,CAACG,UAAb,CAAwB,UAAxB;AACH;;AA3CoB;;AA6CzB3B,WAAW,CAAC4B,IAAZ,GAAmB,SAASC,mBAAT,CAA6BC,CAA7B,EAAgC;AAAE,SAAO,KAAKA,CAAC,IAAI9B,WAAV,EAAuBF,EAAE,CAACiC,QAAH,CAAYhC,EAAE,CAACiC,UAAf,CAAvB,CAAP;AAA4D,CAAjH;;AACAhC,WAAW,CAACiC,KAAZ,GAAoB,aAAcnC,EAAE,CAACoC,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEnC,WAAT;AAAsBoC,EAAAA,OAAO,EAAEpC,WAAW,CAAC4B,IAA3C;AAAiDS,EAAAA,UAAU,EAAE;AAA7D,CAAtB,CAAlC","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\n//import { environment } from '@environments/environment';\r\nexport class AuthService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        //private authInterceptor:AuthInterceptor;\r\n        this.urlRegister = \"http://localhost:3000/signup\";\r\n        this.urlLogin = \"http://localhost:3000/signin\";\r\n        //this.authInterceptor = new AuthInterceptor();\r\n    }\r\n    async signUp(regData) {\r\n        console.log(\"register...\");\r\n        let registered = false;\r\n        let data = await this.http.post(this.urlRegister, {\r\n            username: regData.username,\r\n            password: regData.password,\r\n            email: regData.email,\r\n            name: regData.name,\r\n            surname: regData.surname\r\n        }).toPromise();\r\n        if (!data.failed) {\r\n            registered = true;\r\n        }\r\n        return registered;\r\n    }\r\n    async login(username, password) {\r\n        console.log(\"logging...\");\r\n        let logged = false;\r\n        let data = await this.http.post(this.urlLogin, { username, password }).toPromise();\r\n        if (data.logged) {\r\n            console.log(data);\r\n            this.setSession(data.jwt, username);\r\n            logged = true;\r\n        }\r\n        return logged;\r\n    }\r\n    setSession(authResult, username) {\r\n        //const expiresAt = moment().add(authResult.expiresIn,'second');\r\n        console.log(authResult);\r\n        localStorage.setItem('jwt', authResult);\r\n        localStorage.setItem('username', username);\r\n    }\r\n    logout() {\r\n        localStorage.removeItem(\"jwt\");\r\n        localStorage.removeItem(\"username\");\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}