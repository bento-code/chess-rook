{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/pabli/Documents/Bootcamp/chess-tower/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; //import { environment } from '@environments/environment';\n\nexport class AuthService {\n  constructor(http) {\n    this.http = http; //private authInterceptor:AuthInterceptor;\n\n    this.urlRegister = \"http://localhost:3000/signup\";\n    this.urlLogin = \"http://localhost:3000/signin\"; //this.authInterceptor = new AuthInterceptor();\n  }\n\n  signUp(regData) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"logging...\");\n      let registered = false;\n      yield _this.http.post(_this.urlRegister, {\n        username: regData.username,\n        password: regData.password,\n        email: regData.email,\n        name: regData.name,\n        surname: regData.surname\n      }).subscribe({\n        next: data => {\n          if (!data.failed) {\n            registered = true;\n          }\n        },\n        error: error => {\n          console.error('There was an error!', error);\n        }\n      });\n      return registered;\n    })();\n  }\n\n  login(username, password) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      console.log(\"logging...\");\n      let logged = false;\n\n      let wait = _this2.http.post(_this2.urlLogin, {\n        username,\n        password\n      }).subscribe({\n        next: data => {\n          if (data.logged) {\n            console.log(data);\n\n            _this2.setSession(data.jwt, username);\n\n            logged = true;\n          }\n        },\n        error: error => {\n          console.error('There was an error!', error);\n        }\n      });\n\n      console.log(\"|||||||||||||||||||||||||||||||\");\n      console.log(wait);\n      console.log(\"|||||||||||||||||||||||||||||||\");\n      return logged;\n    })();\n  }\n\n  setSession(authResult, username) {\n    //const expiresAt = moment().add(authResult.expiresIn,'second');\n    console.log(authResult);\n    localStorage.setItem('jwt', authResult);\n    localStorage.setItem('username', username);\n  }\n\n  logout() {\n    localStorage.removeItem(\"jwt\");\n    localStorage.removeItem(\"username\");\n  }\n\n}\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/pabli/Documents/Bootcamp/chess-tower/src/app/shared/auth.service.ts"],"names":["i0","i1","AuthService","constructor","http","urlRegister","urlLogin","signUp","regData","console","log","registered","post","username","password","email","name","surname","subscribe","next","data","failed","error","login","logged","wait","setSession","jwt","authResult","localStorage","setItem","logout","removeItem","ɵfac","AuthService_Factory","t","ɵɵinject","HttpClient","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":"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","sourcesContent":["import * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\n//import { environment } from '@environments/environment';\r\nexport class AuthService {\r\n    constructor(http) {\r\n        this.http = http;\r\n        //private authInterceptor:AuthInterceptor;\r\n        this.urlRegister = \"http://localhost:3000/signup\";\r\n        this.urlLogin = \"http://localhost:3000/signin\";\r\n        //this.authInterceptor = new AuthInterceptor();\r\n    }\r\n    async signUp(regData) {\r\n        console.log(\"logging...\");\r\n        let registered = false;\r\n        await this.http.post(this.urlRegister, {\r\n            username: regData.username,\r\n            password: regData.password,\r\n            email: regData.email,\r\n            name: regData.name,\r\n            surname: regData.surname\r\n        })\r\n            .subscribe({\r\n            next: (data) => {\r\n                if (!data.failed) {\r\n                    registered = true;\r\n                }\r\n            },\r\n            error: (error) => {\r\n                console.error('There was an error!', error);\r\n            }\r\n        });\r\n        return registered;\r\n    }\r\n    async login(username, password) {\r\n        console.log(\"logging...\");\r\n        let logged = false;\r\n        let wait = this.http.post(this.urlLogin, { username, password }).subscribe({\r\n            next: (data) => {\r\n                if (data.logged) {\r\n                    console.log(data);\r\n                    this.setSession(data.jwt, username);\r\n                    logged = true;\r\n                }\r\n            },\r\n            error: (error) => {\r\n                console.error('There was an error!', error);\r\n            }\r\n        });\r\n        console.log(\"|||||||||||||||||||||||||||||||\");\r\n        console.log(wait);\r\n        console.log(\"|||||||||||||||||||||||||||||||\");\r\n        return logged;\r\n    }\r\n    setSession(authResult, username) {\r\n        //const expiresAt = moment().add(authResult.expiresIn,'second');\r\n        console.log(authResult);\r\n        localStorage.setItem('jwt', authResult);\r\n        localStorage.setItem('username', username);\r\n    }\r\n    logout() {\r\n        localStorage.removeItem(\"jwt\");\r\n        localStorage.removeItem(\"username\");\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}